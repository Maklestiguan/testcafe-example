// Примеры

// импортируем все функции из файла, даем модулю название 'api' для обращения к его функциям
import * as api from '../ready-to-go/lib/apiModule';

// Обязательно везде указываем фикстуру - это как родительский набор или категория, к нему будут относится все нижеуказанные тесты
// Например, если у нас есть покупка и продажа, то можно одну fixture назвать `buying`, а вторую `selling`
// При запуске тестов они будут сгруппированы по fixture и будет сразу понятно какой подсценарий вызывает ошибку
fixture `Примеры`;

// Пример 1 обыкновенный тест
// Основа ---> tests/apiTest.js

// Условно говоря test - функция, которая принимает в себя аргументы: 
// (1) название теста - строка 
// (2) объект контроля теста - t
// При помощи t происходит обращение к методам TestCafe, таким как проверка(t.expect()), нажатие(t.click()), ввод текста(t.typeText()) и т.д.

test('Категория "Blather" - существует', async t => {
    const response = await api.searchForCategory('Blather');
  
    await t.expect(await response.length).eql(1);
});


// Пример 2 запуск одного и того же теста несколько раз с разными данным
// Основа ---> tests/apiTest.js
// Подробнее - https://devexpress.github.io/testcafe/documentation/recipes/best-practices/create-data-driven-tests.html
// Полный пример кода из документации - https://github.com/DevExpress/testcafe-examples/tree/master/examples/create-data-driven-tests

// Для того, чтобы запустить один и тот же тест несколько раз нужно сформировать данные, которые мы будем использовать
// (1) Создадим массив, из которых будем брать данные 
// В массиве будем хранить название категории

// Мы предполагаем, что таких категорий не существует
const arrayOfCategories = ['Domino', 'Money', 'Does not exist'];

// (2) Далее используем конструкцию forEach ("для каждого"), 
// чтобы пройтись по массиву и для каждого элемента запустить функцию (в нашем случае функция - тест)

arrayOfCategories.forEach(category => {
  // Название теста можем писать на русском
  // Используем обратные кавычки - ``, чтобы в названии теста отобразить какую категорию мы ищем
  // Это необязательно, но добавляет удобства; обращаемся с использованием '${}'
  // Кавычки "" используем, чтобы в консоли было более читаемое название теста
  test(`Категория "${category}" - существует`, async t => {
    const response = await api.searchForCategory(category); // в функцию поиска также отправляем категорию из массива arrayOfCategories

    await t.expect(await response.length).eql(0); // Проверяем, что по запросу нам не возвращается ничего
  })
});
