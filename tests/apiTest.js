import * as api from '../lib/apiModule'; // импортируем все функции, используем 'api' для обращения к ним

 // Указываем фикстуру - это как родительский набор, к нему будут относится все нижеуказанные тесты
 // Например, если у нас есть покупка и продажа, то можно одну fixture назвать `buying`, а вторую `selling`
 // При запуске тестов они будут сгруппированы по fixture и будет сразу понятно какой подсценарий вызывает ошибку
fixture`API`;

test('should return last 10 posts', async t => {
  const response = await api.getPosts();

  await t.expect(await response.length).eql(10);
});

test('should search categories', async t => {
  const response = await api.searchForCategory('Blather');

  await t.expect(await response.length).eql(1);
});

// Для того, чтобы запустить один и тот же тест несколько раз нужно указать какие данные мы будем использовать
// Для примера возьмем тест написанный выше и добавим его повторение с разными данными

// (1) Создадим массив, из которых будем брать данные 
// В массиве будем хранить название категории
// (позже мы вынесем этот массив в другой файл для удобного хранения данных)

const arrayOfCategories = ['Domino', 'Money', 'Does not exist'];

// (2) Далее используем конструкцию forEach (для каждого), 
// чтобы пройтись по массиву и для каждого элемента запустить функцию (в нашем случае функция - тест)

arrayOfCategories.forEach(category => {
  // Название теста можем писать на русском
  // Используем обратные кавычки - ``, чтобы в названии теста отобразить какую категорию мы ищем
  // Это необязательно, но добавляет удобства; обращаемся с использованием '${}'
  // Кавычки "" используем, чтобы в консоли было более читаемое название теста
  test(`Категория "${category}" - существует`, async t => {
    const response = await api.searchForCategory(category); // в поиск также отправляем категорию из массива arrayOfCategories

    await t.expect(await response.length).eql(1);
  })
});

// Так как указанных в массиве категорий не существует - тесты "падают", т.е. выдают ошибку
// На самом деле это правильная работа, т.к. этих категорий создатель сайта не предполагал
// задача - исправить указанный выше тест таким образом, чтобы он считался пройденным